{"version":3,"sources":["variables.ts","components/Sidebar/components/UserCard/UserCard.tsx","components/Sidebar/SideBar.tsx","components/Content/Content.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Color","UserCard","props","user","firstName","SideBar","className","Cinder","Content","Container","styled","div","HARDCODED_USER","lastName","email","App","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0KAAYA,E,wDAAAA,K,0BAAAA,M,KCOZ,IAIeC,EAJE,SAACC,GAChB,OAAO,6BAAMA,EAAMC,KAAKC,Y,oJCgBXC,EAbC,SAACH,GACf,OACE,qBACEI,UAAWJ,EAAMI,UADnB,KAGwBN,EAAMO,QAG5B,kBAAC,EAAD,CAAUJ,KAAMD,EAAMC,SCTbK,EAJC,SAACN,GACf,OAAO,yBAAKI,UAAWJ,EAAMI,WAAtB,wBCFHG,EAAYC,IAAOC,IAAV,qEAAGD,CAAH,sCAKTE,EAAiB,CACrBR,UAAW,OACXS,SAAU,MACVC,MAAO,gB,2HAkBMC,MAff,WACE,OACE,kBAACN,EAAD,KACE,qBAKEN,KAAMS,IAER,kBAAC,EAAD,QCdcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0dCVN,IAAMC,EAAcC,YAAH,KAgBjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAACJ,EAAD,OAEFK,SAASC,eAAe,SD2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e0f5e6a7.chunk.js","sourcesContent":["export enum Color {\n  Cinder = \"rgb(33, 37, 41)\",\n}\n","import React from \"react\";\nimport { User } from \"types\";\n\ntype Props = {\n  user: User;\n};\n\nconst UserCard = (props: Props) => {\n  return <div>{props.user.firstName}</div>;\n};\n\nexport default UserCard;\n","import React from \"react\";\nimport \"styled-components/macro\";\nimport { Color } from \"variables\";\nimport { User } from \"types\";\nimport UserCard from \"./components/UserCard/UserCard\";\n\ntype Props = {\n  className?: string;\n  user: User;\n};\n\nconst SideBar = (props: Props) => {\n  return (\n    <div\n      className={props.className}\n      css={`\n        background-color: ${Color.Cinder};\n      `}\n    >\n      <UserCard user={props.user} />\n    </div>\n  );\n};\n\nexport default SideBar;\n","import React from \"react\";\n\ntype Props = {\n  className?: string;\n};\n\nconst Content = (props: Props) => {\n  return <div className={props.className}>this is the content</div>;\n};\n\nexport default Content;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport SideBar from \"./components/Sidebar/SideBar\";\nimport Content from \"./components/Content/Content\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst HARDCODED_USER = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  email: \"john@doe.com\",\n};\n\nfunction App() {\n  return (\n    <Container>\n      <SideBar\n        css={`\n          width: 270px;\n          height: 100vh;\n        `}\n        user={HARDCODED_USER}\n      />\n      <Content />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createGlobalStyle } from \"styled-components/macro\";\n// types needs to be imported to make the css prop work\nimport * as types from \"styled-components/cssprop\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}