{"version":3,"sources":["components/Content/components/NoContentPlaceholder/assets/no_content_placeholder_image.png","variables.ts","components/Sidebar/SideBar.tsx","components/Content/components/NoContentPlaceholder/NoContentPlaceholder.tsx","components/Content/Content.tsx","GlobalStyle.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Color","SideBar","props","className","Cinder","Container","styled","div","Image","img","Title","p","Subtitle","CodGray","NoContentPlaceholder","src","no_content_placeholder_image","alt","FullHeightAndWidth","Content","GlobalStyle","createGlobalStyle","HARDCODED_USER","firstName","lastName","email","App","user","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,0D,+ECA/BC,E,iDAAAA,K,yBAAAA,E,8BAAAA,E,yBAAAA,E,0BAAAA,E,gCAAAA,M,6JCqBGC,EAXC,SAACC,GACf,OACE,qBACEC,UAAWD,EAAMC,UADnB,KAGwBH,EAAMI,U,iBCT5BC,EAAYC,IAAOC,IAAV,sFAAGD,CAAH,4DAMTE,EAAQF,IAAOG,IAAV,kFAAGH,CAAH,kBAILI,EAAQJ,IAAOK,EAAV,kFAAGL,CAAH,0EAOLM,EAAWN,IAAOK,EAAV,qFAAGL,CAAH,+DAIHN,EAAMa,SAkBFC,EAfc,WAC3B,OACE,kBAACT,EAAD,KACE,kBAACG,EAAD,CACEO,IAAKC,IACLC,IAAI,iCAEN,kBAACP,EAAD,mCACA,kBAACE,EAAD,6EC9BAM,EAAqBZ,IAAOC,IAAV,kFAAGD,CAAH,yCAcTa,EARC,SAACjB,GACf,OACE,kBAACgB,EAAD,CAAoBf,UAAWD,EAAMC,WACnC,kBAAC,EAAD,Q,0OCfN,IASeiB,EATKC,YAAH,KCIXhB,EAAYC,IAAOC,IAAV,qEAAGD,CAAH,sCAKTgB,EAAiB,CACrBC,UAAW,OACXC,SAAU,MACVC,MAAO,gB,2HAqBMC,MAlBf,WACE,OACE,oCACE,kBAAC,EAAD,KACE,qBAKEC,KAAML,IAER,kBAAC,EAAD,OAEF,kBAAC,EAAD,QClBcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e84e5c1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_content_placeholder_image.86a96933.png\";","export enum Color {\n  Cinder = \"rgb(33, 37, 41)\",\n  LimedSpruce = \"rgb(57, 67, 78)\",\n  White = \"rgb(255,255,255)\",\n  CodGray = \"rgb(18, 18, 18)\",\n  DodgerBlue = \"rgb(67, 124, 255)\",\n}\n","import React from \"react\";\nimport \"styled-components/macro\";\nimport { Color } from \"variables\";\nimport { User } from \"types\";\n\ntype Props = {\n  className?: string;\n  user: User;\n};\n\nconst SideBar = (props: Props) => {\n  return (\n    <div\n      className={props.className}\n      css={`\n        background-color: ${Color.Cinder};\n      `}\n    />\n  );\n};\n\nexport default SideBar;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\n\nimport { Color } from \"variables\";\nimport no_content_placeholder_image from \"./assets/no_content_placeholder_image.png\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Image = styled.img`\n  width: 250px;\n`;\n\nconst Title = styled.p`\n  font-size: 22px;\n  font-weight: 600;\n  line-height: 29px;\n  color: rgb(18, 18, 18);\n`;\n\nconst Subtitle = styled.p`\n  font-size: 17px;\n  font-weight: 400;\n  line-height: 24px;\n  color: ${Color.CodGray};\n`;\n\nconst NoContentPlaceholder = () => {\n  return (\n    <Container>\n      <Image\n        src={no_content_placeholder_image}\n        alt=\"No content placeholder image\"\n      />\n      <Title>The Start of a Better You!</Title>\n      <Subtitle>\n        Habits are like dominos. As one is formed, all others will follow!\n      </Subtitle>\n    </Container>\n  );\n};\n\nexport default NoContentPlaceholder;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport NoContentPlaceholder from \"./components/NoContentPlaceholder/NoContentPlaceholder\";\n\ntype Props = {\n  className?: string;\n};\n\nconst FullHeightAndWidth = styled.div`\n  width: 100%;\n  height: 100%;\n  margin: auto;\n`;\n\nconst Content = (props: Props) => {\n  return (\n    <FullHeightAndWidth className={props.className}>\n      <NoContentPlaceholder />\n    </FullHeightAndWidth>\n  );\n};\n\nexport default Content;\n","import { createGlobalStyle } from \"styled-components/macro\";\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  margin: 0;\n  font-family: font-family: Open Sans,sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n`;\n\nexport default GlobalStyle;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport SideBar from \"./components/Sidebar/SideBar\";\nimport Content from \"./components/Content/Content\";\nimport GlobalStyle from \"./GlobalStyle\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst HARDCODED_USER = {\n  firstName: \"John\",\n  lastName: \"Doe\",\n  email: \"john@doe.com\",\n};\n\nfunction App() {\n  return (\n    <>\n      <Container>\n        <SideBar\n          css={`\n            width: 270px;\n            height: 100vh;\n          `}\n          user={HARDCODED_USER}\n        />\n        <Content />\n      </Container>\n      <GlobalStyle />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n// types needs to be imported to make the css prop work\nimport * as types from \"styled-components/cssprop\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}